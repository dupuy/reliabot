
[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

#[tool.autopep8]
#ignore = ["E203"]

[tool.bandit]
skips = ["B404", "B603"]

[tool.poetry]
name = "reliabot"
version = "0.1.0"
description = "Maintain GitHub Dependabot configuration."
license = "MIT"
authors = ["Alexander Dupuy <alex@dupuy.us>"]
readme = "README.md"
repository = "https://github.com/dupuy/reliabot"
keywords = [
    "dependabot",
    "dependency-manager",
    "github",
    "pre-commit-hook",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Environment :: Plugins",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: Microsoft :: Windows :: Windows Vista",
    "Operating System :: POSIX",
    "Topic :: Software Development :: Version Control :: Git",
    "Topic :: System :: Software Distribution",
    "Topic :: Utilities",
]

[tool.poetry.dependencies]
python = "^3.8"  # 3.8 end-of-life 2024-10

"ruamel.yaml" = "^0.18.6"

pyre2 = { version = "^0.3.6", optional = true }
pyre2-updated = { version = "^0.3.7", optional = true }

[tool.poetry.extras]
re2 = ["pyre2"]
re2-wheels = ["pyre2-updated"]

[tool.poetry.scripts]
reliabot = 'reliabot.reliabot:main'

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/dupuy/reliabot/issues"

[tool.ruff]
line-length = 79

# By default, always show source code snippets.
output-format = "full"

# Preview formatting conflicts with python-reorder-imports about blank line
# after initial docstring. Hopefully when it is no longer in preview there
# will be some way to disable it.
#preview = true

# Enumerate all fixed violations.
show-fixes = true

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
# Allow en-dash (U+2013), which could be confused for "-".
allowed-confusables = ["–"]

# Enabling flake8 -builtins (A), -annotations (ANN), -bugbear (B),
# -comprehensions (C4), -pydocstyle (D), -errmsg (EM), -executable (EXE),
# -future-annotations (FA), -boolean-trap (FBT), -implicit-str-concat (ISC),
# -import-conventions (ICN), -pie (PIE), -quotes (Q), -return (RET),
# -bandit (S), -simplify (SIM), -type-checking (TCH), and -2020 (YTT) in
# addition to flynt (FLY) pep8-naming (N), perflint (PERF), pylint (PL*),
# pyupgrade (UP), and the defaults (E4, E7, E9, F).
# Pycodestyle warnings (W) aren't selected since other pre-commits catch them
# (except for too-noisy W505).
# TODO: "ASYNC", "DTZ", "ERA", "G", "INP", "INT", "LOG", "PTH", "SLOT", & "TRIO"
# (if they become relevant). Also maybe "FURB"
select = [
    "E4", "E7", "E9", "F", "A", "ANN", "B", "C4", "D", "EM", "EXE", "FA", "FBT",
    "ISC", "ICN", "PIE", "Q", "RET", "S", "SIM", "TCH", "YTT",
    "FLY", "N", "PERF", "PL", "UP",
    "RUF",
]
ignore = [
    "ANN101",  # missing-type-self
    "D105",  # undocumented-magic-method
    "ISC001",  # single-line-implicit-string-concatenation  # formatter conflict
    "PLR091", # too-manu-*  # TODO: reduce complexity or disable with comments
    "PLR2004", # magic-value-comparison
    "S404",  # suspicious-subprocess-import
    "S603",  # subprocess call: check for execution of untrusted input
    "UP007",  # non-pep604-annotation – Use X | Y for type annotations
]

[tool.ruff.lint.flake8-type-checking]
# Add quotes around type annotations, if doing so would allow
# an import to be moved into a type-checking block.
quote-annotations = true

[tool.ruff.lint.pycodestyle]
max-doc-length = 79

[tool.ruff.lint.pydocstyle]
convention = "pep257"
