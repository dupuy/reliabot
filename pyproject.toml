[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.bandit]
skips = ["B404", "B603"]

# git-cliff ~ https://git-cliff.org/docs/configuration
# with pyproject.toml embedding https://git-cliff.org/docs/integration/python/
[tool.git-cliff.remote.github]
owner = "dupuy"
repo = "reliabot"
# token = ""

[tool.git-cliff.changelog]

# changelog header
header = """
# Changelog\n
This file documents notable changes to Reliabot.\n
It uses the [Keep a Changelog](https://keepachangelog.com/en/1.0.0/) format,
and follows [Semantic Versioning](https://semver.org/spec/v2.0.0.html) for
releases.\n
"""

# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}

{% if version -%}
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else -%}
    ## [Unreleased]
{% endif -%}

### Details\n
{% for group, commits in commits | group_by(attribute="group") %}
    #### {{ group | upper_first }}
    {%- for commit in commits %}
        - {{ commit.message | upper_first | trim }}\
            {% if commit.github.username %} by @{{ commit.github.username }}{%- endif -%}
            {% if commit.github.pr_number %} in \
              [#{{ commit.github.pr_number }}]({{ self::remote_url() }}/pull/{{ commit.github.pr_number }}) \
            {%- endif -%}
    {% endfor %}
{% endfor %}

{%- if github.contributors | filter(attribute="is_first_time", value=true) | length != 0 %}
  ## New Contributors\n
{%- endif -%}

{% for contributor in github.contributors | filter(attribute="is_first_time", value=true) %}
  * üßëüèΩ‚Äçüíª @{{ contributor.username }} made their first contribution ‚ú®
    {%- if contributor.pr_number %} in \
      [#{{ contributor.pr_number }}]({{ self::remote_url() }}/pull/{{ contributor.pr_number }}) \
    {%- endif %}
{%- endfor %}\n
"""

# template for the changelog footer (release diff reference links)
footer = """
{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}

{% for release in releases -%}
    {% if release.version -%}
        {% if release.previous.version -%}
            [{{ release.version | trim_start_matches(pat="v") }}]: \
                {{ self::remote_url() }}/compare/{{ release.previous.version }}..{{ release.version }}
        {% endif -%}
    {% else -%}
        [unreleased]: {{ self::remote_url() }}/compare/{{ release.previous.version }}..HEAD
    {% endif -%}
{% endfor %}
<!-- generated by git-cliff on {{ now() | date(format="%Y-%m-%d") }} -->
"""
# remove the leading and trailing whitespace from the templates
trim = true

[tool.git-cliff.git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = true
# regex for preprocessing the commit messages
commit_preprocessors = [
    # remove issue numbers from commits
    { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "" },
]
# regex for parsing and grouping commits
commit_parsers = [
    { message = "^.*: add", group = "Added üöÄ" },
    { message = "^.*: support", group = "Added üöÄ" },
    { message = "^.*: remove", group = "Removed üóëÔ∏è" },
    { message = "^.*: delete", group = "Removed üóëÔ∏è" },
    { message = "^test", group = "Fixed üõ†Ô∏è" },
    { message = "^fix", group = "Fixed üõ†" },
    { message = "^.*: fix", group = "Fixed üõ†" },
    { message = "^.*", group = "Changed üîÑ" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# regex for matching git tags
tag_pattern = "v[0-9].*"
# regex for skipping tags
skip_tags = "-(alpha|beta|rc)"
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "newest"

[tool.poetry]
name = "reliabot"
version = "0.2.4"
description = "Maintain GitHub Dependabot configuration."
license = "MIT"
authors = ["Alexander Dupuy <alex@dupuy.us>"]
readme = "README.md"
repository = "https://github.com/dupuy/reliabot"
keywords = [
    "dependabot",
    "dependency-manager",
    "github",
    "pre-commit-hook",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Environment :: Plugins",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: Microsoft :: Windows :: Windows Vista",
    "Operating System :: POSIX",
    "Topic :: Software Development :: Version Control :: Git",
    "Topic :: System :: Software Distribution",
    "Topic :: Utilities",
]

[tool.poetry.dependencies]
python = "^3.8"  # 3.8 end-of-life 2024-10

"ruamel.yaml" = "^0.18.6"

pyre2 = { version = "^0.3.6", optional = true }
pyre2-updated = { version = "^0.3.8", optional = true }

[tool.poetry.group.testing]
optional = true

[tool.poetry.group.testing.dependencies]
tox = "^4.15.0"

[tool.poetry.extras]
re2 = ["pyre2"]
re2-wheels = ["pyre2-updated"]

[tool.poetry.scripts]
reliabot = 'reliabot.reliabot:main'

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/dupuy/reliabot/issues"

[tool.ruff]
line-length = 79

# By default, always show source code snippets.
output-format = "full"

# Preview formatting conflicts with python-reorder-imports about blank line
# after initial docstring. Hopefully when it is no longer in preview there
# will be some way to disable it.
#preview = true

# Enumerate all fixed violations.
show-fixes = true

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
# Allow en-dash (U+2013), which could be confused for "-".
allowed-confusables = ["‚Äì"]

# Enabling flake8 -builtins (A), -annotations (ANN), -bugbear (B),
# -comprehensions (C4), -pydocstyle (D), -errmsg (EM), -executable (EXE),
# -future-annotations (FA), -boolean-trap (FBT), -implicit-str-concat (ISC),
# -import-conventions (ICN), -pie (PIE), -quotes (Q), -return (RET),
# -bandit (S), -simplify (SIM), -type-checking (TCH), and -2020 (YTT) in
# addition to flynt (FLY) pep8-naming (N), perflint (PERF), pylint (PL*),
# pyupgrade (UP), and the defaults (E4, E7, E9, F).
# Pycodestyle warnings (W) aren't selected since other pre-commits catch them
# (except for too-noisy W505).
# TODO: "ASYNC", "DTZ", "ERA", "G", "INP", "INT", "LOG", "PTH", "SLOT", & "TRIO"
# (if they become relevant). Also maybe "FURB"
select = [
    "E4", "E7", "E9", "F", "A", "ANN", "B", "C4", "D", "EM", "EXE", "FA", "FBT",
    "ISC", "ICN", "PIE", "Q", "RET", "S", "SIM", "TCH", "YTT",
    "FLY", "N", "PERF", "PL", "UP",
    "RUF",
]
ignore = [
    "ANN101",  # missing-type-self
    "B028",  # no-explicit-stacklevel
    "D105",  # undocumented-magic-method
    "ISC001",  # single-line-implicit-string-concatenation  # formatter conflict
    "PLR091", # too-manu-*  # TODO: reduce complexity or disable with comments
    "PLR2004", # magic-value-comparison
    "S404",  # suspicious-subprocess-import
    "S603",  # subprocess call: check for execution of untrusted input
    "UP007",  # non-pep604-annotation ‚Äì Use X | Y for type annotations
]

[tool.ruff.lint.flake8-type-checking]
# Add quotes around type annotations, if doing so would allow
# an import to be moved into a type-checking block.
quote-annotations = true

[tool.ruff.lint.pycodestyle]
max-doc-length = 79

[tool.ruff.lint.pydocstyle]
convention = "pep257"
